

import com.intellij.database.model.DasTable
import com.intellij.database.model.ObjectKind
import com.intellij.database.util.Case
import com.intellij.database.util.DasUtil

config = [
        impSerializable  : true,
        extendBaseEntity : false,
        extendBaseService: false,
        useLombok        : true, // 不使用会生成get、set方法

        // 不生成哪个就注释哪个
        generateItem     : [
                "Entity",
                "Service",
                "ServiceImpl",
                "VO",
                "DTO",
                "Convert",
                "Controller",
                "Repository",
                //"RepositoryCustom",
        ]
]

typeMapping = [
        (~/(?i)bool|boolean/)     : "Boolean",
        (~/(?i)bigint/)                   : "Long",
        (~/(?i)int|tinyint/)              : "Integer",
        (~/(?i)float|double|decimal|real/): "Double",
        (~/(?i)datetime|timestamp/)       : "java.util.Date",
        (~/(?i)date/)                     : "java.util.Date",
        (~/(?i)time/)                     : "java.util.Date",
        (~/(?i)/)                         : "String"
]

FILES.chooseDirectoryAndSave("Choose directory", "Choose where to store generated files") { dir ->
    SELECTION.filter {
        it instanceof DasTable && it.getKind() == ObjectKind.TABLE
    }.each {
        generate(it, dir)
    }
}

// 生成对应的文件
def generate(table, dir) {

    def entityPath = "${dir.toString()}\\entity",
        modelPath = "${dir.toString()}\\model",
        modelVOPath = "${dir.toString()}\\model\\vo",
        modelDTOPath = "${dir.toString()}\\model\\dto",
        modelConvertPath = "${dir.toString()}\\model\\cvt",
        servicePath = "${dir.toString()}\\service",
        serviceImplPath = "${dir.toString()}\\service\\impl",
        repPath = "${dir.toString()}\\repository",
        repImpPath = "${dir.toString()}\\repository\\impl",
        controllerPath = "${dir.toString()}\\controller"

    mkdirs([entityPath,modelPath,modelVOPath,modelDTOPath,modelConvertPath,serviceImplPath, servicePath, repPath, repImpPath, controllerPath])

    System.out.println(table.getName())
    def entityName = javaName(table.getName(), true)
    def fields = calcFields(table)
    def basePackage = clacBasePackage(dir)

    if (isGenerate("Entity")) {
        genUTF8File(entityPath, "${entityName}.java").withPrintWriter { out -> genEntity(out, table, entityName, fields, basePackage) }
    }
    if (isGenerate("VO")) {
        genUTF8File(modelVOPath, "${entityName}VO.java").withPrintWriter { out -> genModelVO(out, table, entityName, fields, basePackage) }
    }
    if (isGenerate("DTO")) {
        genUTF8File(modelDTOPath, "${entityName}DTO.java").withPrintWriter { out -> genModelDTO(out, table, entityName, fields, basePackage) }
    }
    if (isGenerate("Convert")) {
        genUTF8File(modelConvertPath, "${entityName}Convert.java").withPrintWriter { out -> genConvertClass(out, entityName,basePackage) }
    }
    if (isGenerate("Service")) {
        genUTF8File(servicePath, "${entityName}Service.java").withPrintWriter { out -> genService(out, table, entityName, fields, basePackage) }
    }
    if (isGenerate("ServiceImpl")) {
        genUTF8File(serviceImplPath, "${entityName}ServiceImpl.java").withPrintWriter { out -> genServiceImpl(out, table, entityName, fields, basePackage) }
    }
    if (isGenerate("Repository")) {
        genUTF8File(repPath, "${entityName}Repository.java").withPrintWriter { out -> genRepository(out, table, entityName, fields, basePackage) }
    }
    if (isGenerate("RepositoryCustom")) {
        genUTF8File(repPath, "${entityName}RepositoryCustom.java").withPrintWriter { out -> genRepositoryCustom(out, entityName, basePackage) }
        genUTF8File(repImpPath, "${entityName}RepositoryImpl.java").withPrintWriter { out -> genRepositoryImpl(out, table, entityName, fields, basePackage) }

    }
    if (isGenerate("RepositoryImpl")) {
    }
    if (isGenerate("Controller")) {
        genUTF8File(controllerPath, "${entityName}Controller.java").withPrintWriter { out -> genController(out, table, entityName, fields, basePackage) }
    }

}

// 是否需要被生成
def isGenerate(itemName) {
    config.generateItem.contains(itemName)
}

// 指定文件编码方式，防止中文注释乱码
def genUTF8File(dir, fileName) {
    new PrintWriter(new OutputStreamWriter(new FileOutputStream(new File(dir, fileName)), "utf-8"))
}

// 生成每个字段
def genProperty(out, field) {

    out.println ""
    out.println "\t/**"
    out.println "\t * ${field.comment}"
    out.println "\t * default value: ${field.default}"
    out.println "\t */"
    // 默认表的第一个字段为主键
    if (field.position == 1) {
        out.println "\t@Id"
        if (field.getText.contains('auto_increment')) {
            out.println "\t@GeneratedValue(strategy = GenerationType.IDENTITY)"
        }
    }
    // 枚举不需要长度
    out.println "\t@Column(" +
            "name = \"${field.colum}\", " +
            "nullable = ${!field.isNotNull}${field.len == "" ? "" : ", length = $field.len"}, " +
            "columnDefinition = \"${field.dataType}\")"
    out.println "\tprivate ${field.type} ${field.name};"
}
// 生成每个字段
def genVODTOProperty(out, field) {

    out.println "\t@ApiModelProperty(value = \"${field.comment}\")"
    out.println "\tprivate ${field.type} ${field.name};"
}

// 生成get、get方法
def genGetSet(out, field) {

    // get
    out.println "\t"
    out.println "\tpublic ${field.type} get${field.name.substring(0, 1).toUpperCase()}${field.name.substring(1)}() {"
    out.println "\t\treturn this.${field.name};"
    out.println "\t}"

    // set
    out.println "\t"
    out.println "\tpublic void set${field.name.substring(0, 1).toUpperCase()}${field.name.substring(1)}(${field.type} ${field.name}) {"
    out.println "\t\tthis.${field.name} = ${field.name};"
    out.println "\t}"
}

// 生成VO实体
def genModelVO(out, table, entityName, fields, basePackage) {
    out.println "package ${basePackage}.model.vo;"
    out.println ""
    def tStr = getTableComment(table)
    if (config.extendBaseEntity) {
        out.println "import $baseEntityPackage;"
    }
    if (config.useLombok) {
        out.println "import lombok.*;"
        out.println ""
    }
    if (config.impSerializable) {
        out.println "import java.io.Serializable;"
        out.println ""
    }
    out.println "import io.swagger.annotations.ApiModel;"
    out.println "import io.swagger.annotations.ApiModelProperty;"
    out.println"/**"
    out.println" *@description: ${tStr} VO"
    out.println" *@author: JPA AUTO"
    def date = new Date()
    out.println" *@date: ${date}"
    out.println" */"
    if (config.useLombok) {
        out.println "@Data"
        out.println "@ToString"
        out.println "@NoArgsConstructor"
        out.println "@AllArgsConstructor"
        out.println "@ApiModel(description = \"${tStr} VO\")"
    }
    out.println "public class ${entityName}VO${config.impSerializable ? " implements Serializable" : ""} {"

    fields.each() {
        genVODTOProperty(out, it)
    }

    if (!config.useLombok) {
        fields.each() {
            genGetSet(out, it)
        }
    }



    out.println "}"
}
// 生成DTO实体
def genModelDTO(out, table, entityName, fields, basePackage) {
    out.println "package ${basePackage}.model.dto;"
    out.println ""
    if (config.extendBaseEntity) {
        out.println "import $baseEntityPackage;"
    }
    if (config.useLombok) {
        out.println "import lombok.*;"
        out.println ""
    }
    if (config.impSerializable) {
        out.println "import java.io.Serializable;"
        out.println ""
    }
    out.println "import javax.persistence.*;"
    out.println "import io.swagger.annotations.ApiModel;"
    out.println "import io.swagger.annotations.ApiModelProperty;"
    def tStr = getTableComment(table)
    out.println"/**"
    out.println" *@description: ${tStr} DTO"
    out.println" *@author: JPA AUTO"
    def date = new Date()
    out.println" *@date: ${date}"
    out.println" */"

    if (config.useLombok) {
        out.println "@Data"
        out.println "@ToString"
        out.println "@NoArgsConstructor"
        out.println "@AllArgsConstructor"
        out.println "@ApiModel(description = \"${tStr} DTO\")"
    }
    out.println "public class ${entityName}DTO${config.impSerializable ? " implements Serializable" : ""} {"

    fields.each() {
        genVODTOProperty(out, it)
    }

    if (!config.useLombok) {
        fields.each() {
            genGetSet(out, it)
        }
    }
    out.println "}"
}
// 生成实体类
def genEntity(out, table, entityName, fields, basePackage) {
    out.println "package ${basePackage}.entity;"
    out.println ""
    if (config.extendBaseEntity) {
        out.println "import $baseEntityPackage;"
    }
    if (config.useLombok) {
        out.println "import lombok.*;"
        out.println ""
    }
    if (config.impSerializable) {
        out.println "import java.io.Serializable;"
        out.println ""
    }
    def tStr = getTableComment(table)
    out.println "import javax.persistence.*;"
    out.println ""
    out.println"/**"
    out.println" *@description: ${tStr} Entity"
    out.println" *@author: JPA AUTO"
    def date = new Date()
    out.println" *@date: ${date}"
    out.println" */"
    if (config.useLombok) {
        out.println "@Data"
    }
    out.println "@Entity"
    out.println "@AllArgsConstructor\n" +
            "@NoArgsConstructor"
    out.println "@Table(name = \"${table.getName()}\")"
    out.println "public class $entityName${config.extendBaseEntity ? " extends BaseEntity" : ""}${config.impSerializable ? " implements Serializable" : ""} {"

    if (config.extendBaseEntity) {
        fields = fields.findAll { it ->
            !baseEntityProperties.any { it1 -> it1 == it.name }
        }
    }

    fields.each() {
        genProperty(out, it)
    }

    if (!config.useLombok) {
        fields.each() {
            genGetSet(out, it)
        }
    }
    out.println "}"
}

// 生成Service
def genService(out, table, entityName, fields, basePackage) {
    out.println "package ${basePackage}.service;"
    out.println ""
    out.println "import ${basePackage}.model.dto.${entityName}DTO;"
    out.println "import ${basePackage}.model.vo.${entityName}VO;"
    out.println "import java.util.List;"
    out.println "import com.anakin.generator.common.VOPage;"
    out.println ""
    out.println"/**"
    out.println" *@description: ${entityName} service"
    out.println" *@author: JPA AUTO"
    def date = new Date()
    out.println" *@date: ${date}"
    out.println" */"
    if (config.extendBaseService) {
        out.println "import $baseServicePackage;"
        out.println "import ${basePackage}.entity.$entityName;"
    }
    out.println "public interface ${entityName}Service {"
    out.println ""
    autoMethodComments(out,"add ${entityName}".toString(), "dto")
    out.println "\tvoid add(${entityName}DTO dto);"
    out.println ""
    autoMethodComments(out,"delete ${entityName}".toString(), "id")
    out.println "\tvoid delete(${fields[0].type} id);"
    out.println ""
    out.println "\t/**\n" +
            "\t * update ${entityName}\n" +
            "\t * @param dto\n" +
            "\t * @param id\n" +
            "\t */\n" +
            "\tvoid update(${fields[0].type} id, ${entityName}DTO dto);"

    out.println ""
    autoMethodCommentsWithReturn(out,"query ${entityName}".toString(), "id")
    out.println "\t${entityName}VO find(${fields[0].type} id);"
    out.println ""
    autoMethodCommentsWithReturn(out,"query list", "dto")
    out.println "\tList<${entityName}VO> find(${entityName}DTO dto);"
    out.println ""
    out.println "\t/**"
    out.println "\t * query list by page"
    out.println "\t * @param pageNum"
    out.println "\t * @param pageSize"
    out.println "\t * @return"
    out.println "\t */"
    out.println "\tVOPage<${entityName}VO> find(Integer pageNum, Integer pageSize);"
    out.println ""
    out.println "}"
}

// 生成Service impl
def genServiceImpl(out, table, entityName, fields, basePackage) {
    out.println "package ${basePackage}.service.impl;"
    out.println ""
    out.println "import ${basePackage}.enums.CodeMsg;"
    out.println "import ${basePackage}.exception.CommonException;"
    out.println "import ${basePackage}.repository.${entityName}Repository;"
    out.println "import ${basePackage}.service.${entityName}Service;"
    //out.println "import ${basePackage}.entity.$entityName;"
    out.println "import ${basePackage}.model.cvt.${entityName}Convert;"
    out.println "import ${basePackage}.model.dto.${entityName}DTO;"
    out.println "import ${basePackage}.model.vo.${entityName}VO;"
    if (config.extendBaseService) {
        out.println "import $baseServicePackage;"
    }
    out.println "import org.springframework.data.domain.Example;"
    out.println "import org.springframework.data.domain.PageRequest;"
    out.println "import org.springframework.stereotype.Service;"
    out.println "import com.anakin.generator.common.VOPage;"
    out.println "import javax.annotation.Resource;"
    out.println "import java.util.List;"
    out.println "import java.util.stream.Collectors;"
    out.println ""
    out.println"/**"
    out.println" *@description: ${entityName} service impl"
    out.println" *@author: JPA AUTO"
    def date = new Date()
    out.println" *@date: ${date}"
    out.println" */"
    out.println "@Service"
    out.println "public class ${entityName}ServiceImpl implements ${entityName}Service {"
    out.println ""
    out.println "\t@Resource"
    def str = convertCamelCase(entityName)
    def camerStr = "${str}Repository".toString()
    out.println "\tprivate ${entityName}Repository ${str}Repository;"
    out.println ""
    out.println "\t@Override\n" +
            "\tpublic void add(${entityName}DTO dto) {\n" +
            "\t\t${camerStr}.save(${entityName}Convert.INSTANCE.toEntity(dto));\n" +
            "\t}\n" +
            "\n" +
            "\t@Override\n" +
            "\tpublic void delete(${fields[0].type} id) {\n" +
            "\t\t${camerStr}.deleteById(id);\n" +
            "\t}\n" +
            "\n" +
            "\t@Override\n" +
            "\tpublic void update(${fields[0].type} id, ${entityName}DTO dto) {\n" +
            "\t\t${camerStr}.save(${entityName}Convert.INSTANCE.toEntity(dto));\n" +
            "\t}\n" +
            "\n" +
            "\t@Override\n" +
            "\tpublic ${entityName}VO find(${fields[0].type} id) {\n" +
            "\t\treturn ${entityName}Convert.INSTANCE.toVO(${camerStr}\n" +
            "\t\t\t\t.findById(id)\n" +
            "\t\t\t\t.orElseThrow(() -> new CommonException(CodeMsg.NOT_FOUND_FAILED)));\n" +
            "\t}\n" +
            "\n" +
            "\t@Override\n" +
            "\tpublic List<${entityName}VO> find(${entityName}DTO dto) {\n" +
            "\t\treturn ${camerStr}\n" +
                   "\t\t\t\t.findAll(Example.of(${entityName}Convert.INSTANCE.toEntity(dto)))\n" +
                   "\t\t\t\t.stream()\n" +
                   "\t\t\t\t.map(${entityName}Convert.INSTANCE::toVO)\n" +
                   "\t\t\t\t.collect(Collectors.toList());\n" +
            "\t}\n" +
            "\n" +
            "\t@Override\n" +
            "\tpublic VOPage<${entityName}VO> find(Integer pageNum, Integer pageSize) {\n" +
            "\t\treturn VOPage.restPage(${camerStr}\n" +
                    "\t\t\t\t.findAll(PageRequest.of(pageNum-1,pageSize))\n" +
                    "\t\t\t\t.map(${entityName}Convert.INSTANCE::toVO));\n" +
            "\t}\n"
    out.println "}"
}

def genController(out, table, entityName, fields, basePackage) {
    def lowStr = convertCamelCase(entityName)
    def nowDate = new Date()
    def lowAllStr = entityName.toLowerCase()
    out.println "package ${basePackage}.controller;\n" +
            "\n" +
            "import ${basePackage}.model.dto.${entityName}DTO;\n" +
            "import ${basePackage}.model.vo.${entityName}VO;\n" +
            "import ${basePackage}.service.${entityName}Service;\n" +
            "import com.anakin.generator.common.ApiDataResult;\n" +
            "import com.anakin.generator.common.ApiResult;\n" +
            "import com.anakin.generator.enums.CodeMsg;\n" +
            "import com.anakin.generator.util.ResultUtil;\n" +
            "import io.swagger.annotations.Api;\n" +
            "import io.swagger.annotations.ApiOperation;\n" +
            "import lombok.extern.slf4j.Slf4j;\n" +
            "import org.springframework.beans.factory.annotation.Autowired;\n" +
            "import com.anakin.generator.common.VOPage;\n" +
            "import org.springframework.validation.annotation.Validated;\n" +
            "import org.springframework.web.bind.annotation.*;\n" +
            "\n" +
            "import java.util.List;\n" +
            "\n" +
            "/**\n" +
            " * @description: ${entityName} Controller\n" +
            " * @author: JPA AUTO\n" +
            " * @date ${nowDate}\n" +
            " */\n" +
            "@Slf4j\n" +
            "@Api(tags = \"${entityName} Controller\")\n" +
            "@RestController\n" +
            "@RequestMapping(\"${lowAllStr}\")\n" +
            "public class ${entityName}Controller {\n" +
            "\n" +
            "    @Autowired\n" +
            "    private ${entityName}Service ${lowStr}Service;\n" +
            "\n" +
            "    @PostMapping\n" +
            "    @ApiOperation(value = \"add ${entityName}\")\n" +
            "    public ApiResult add(@Validated @RequestBody ${entityName}DTO dto) {\n" +
            "        ${lowStr}Service.add(dto);\n" +
            "        return ResultUtil.response(CodeMsg.SUCCESS);\n" +
            "    }\n" +
            "\n" +
            "    @DeleteMapping(\"/{id}\")\n" +
            "    @ApiOperation(value = \"delete ${entityName}\")\n" +
            "    public ApiResult delete(@PathVariable ${fields[0].type} id) {\n" +
            "        ${lowStr}Service.delete(id);\n" +
            "        return ResultUtil.response(CodeMsg.SUCCESS);\n" +
            "    }\n" +
            "\n" +
            "    @PutMapping(\"/{id}\")\n" +
            "    @ApiOperation(value = \"update ${entityName}\")\n" +
            "    public ApiResult update(@PathVariable ${fields[0].type} id, @Validated @RequestBody ${entityName}DTO dto) {\n" +
            "        ${lowStr}Service.update(id, dto);\n" +
            "        return ResultUtil.response(CodeMsg.SUCCESS);\n" +
            "    }\n" +
            "\n" +
            "    @GetMapping(\"/{id}\")\n" +
            "    @ApiOperation(value = \"query ${entityName}\")\n" +
            "    public ApiDataResult<${entityName}VO> find(@PathVariable ${fields[0].type} id) {\n" +
            "        return ResultUtil.response(CodeMsg.SUCCESS,${lowStr}Service.find(id));\n" +
            "    }\n" +
            "\n" +
            "    @GetMapping\n" +
            "    @ApiOperation(value = \"query list\")\n" +
            "    public ApiDataResult<List<${entityName}VO>> find(${entityName}DTO dto) {\n" +
            "        return ResultUtil.response(CodeMsg.SUCCESS,${lowStr}Service.find(dto));\n" +
            "    }\n" +
            "\n" +
            "    @GetMapping(\"/page\")\n" +
            "    @ApiOperation(value = \"query list by page\")\n" +
            "    public ApiDataResult<VOPage<${entityName}VO>> find(@RequestParam Integer pageNum, @RequestParam Integer pageSize) {\n" +
            "        return ResultUtil.response(CodeMsg.SUCCESS,${lowStr}Service.find(pageNum,pageSize));\n" +
            "    }\n" +
            "\n" +
            "}"
}

// 生成Repository
def genRepository(out, table, entityName, fields, basePackage) {
    def customImplStr = "";
    if (isGenerate("RepositoryCustom")) {
        customImplStr = "\t\t${entityName}RepositoryCustom, \n"
    }

    out.println "package ${basePackage}.repository;"
    out.println ""
    out.println "import ${basePackage}.entity.$entityName;"
    out.println "import org.springframework.data.jpa.repository.JpaRepository;"
    out.println "import org.springframework.data.querydsl.QuerydslPredicateExecutor;"
    out.println "import org.springframework.data.jpa.repository.Modifying;\n" +
            "import org.springframework.data.jpa.repository.Query;\n" +
            "import org.springframework.transaction.annotation.Transactional;"

    out.println ""
    def date = new Date()
    out.println "/**\n" +
            " *@description: Repository Method\n" +
            " *@author: JPA AUTO\n" +
            " *@date: ${date}\n" +
            " */"
    out.println "public interface ${entityName}Repository extends JpaRepository<$entityName, ${fields[0].type}>, \n" +
            customImplStr +
            "\t\tQuerydslPredicateExecutor<$entityName> {"
    out.println ""

    out.println"\t@Modifying"
    out.println"\t@Transactional"
    out.println"\t@Query(\"update $entityName t set \" +"
    boolean b = false;
    def lowStr = convertCamelCase(entityName)
    int length = fields.size();
    fields.each() {
        --length;
        if (length == 0) b = true
        if (length != fields.size() - 1) {
            genRepositoryMethod(out, it, lowStr, b)
        }
    }
    out.println "\t        \"where t.${fields[0].name} = :#{#${lowStr}.${fields[0].name}}\") "
    out.println "\t void updateIsNotNull($entityName $lowStr); "
    out.println "}"
}

def genRepositoryMethod(out, field, lowStr,last) {
    if (last)
        out.println "\t        \"t.${field.name} = CASE WHEN :#{#${lowStr}.${field.name}} IS NULL THEN t.${field.name} ELSE :#{#${lowStr}.${field.name}} END \" +"
    else
        out.println "\t        \"t.${field.name} = CASE WHEN :#{#${lowStr}.${field.name}} IS NULL THEN t.${field.name} ELSE :#{#${lowStr}.${field.name}} END ,\" +"
}

// 生成RepositoryCustom
def genRepositoryCustom(out, entityName, basePackage) {
    out.println "package ${basePackage}.repository;"
    out.println ""
    def date = new Date()
    out.println "/**\n" +
            " *@description: Repository Method\n" +
            " *@author: JPA AUTO\n" +
            " *@date: ${date}\n" +
            " */"
    out.println "public interface ${entityName}RepositoryCustom {"
    out.println ""
    out.println "}"
}

// 生成RepositoryImpl
def genRepositoryImpl(out, table, entityName, fields, basePackage) {
    out.println "package ${basePackage}.repository.impl;"
    out.println ""
    out.println "import ${basePackage}.repository.${entityName}RepositoryCustom;"
    out.println "import org.springframework.stereotype.Repository;"
    out.println ""
    out.println "import javax.persistence.EntityManager;"
    out.println "import javax.persistence.PersistenceContext;"
    out.println ""
    def date = new Date()
    out.println "/**\n" +
            " *@description: Repository Impl Method\n" +
            " *@author: JPA AUTO\n" +
            " *@date: ${date}\n" +
            " */"
    out.println "@Repository"
    out.println "public class ${entityName}RepositoryImpl implements ${entityName}RepositoryCustom {"
    out.println ""
    out.println "\t@PersistenceContext"
    out.println "\tprivate EntityManager entityManager;"
    out.println "}"
}


// 生成转换方法
def genConvertClass(out,entityName,basePackage) {
    out.println "package ${basePackage}.model.cvt;"
    out.println ""
    out.println "import ${basePackage}.entity.${entityName};"
    out.println "import ${basePackage}.model.dto.${entityName}DTO;"
    out.println "import ${basePackage}.model.vo.${entityName}VO;"
    out.println "import org.mapstruct.Mapper;"
    out.println "import org.mapstruct.factory.Mappers;"
    out.println ""
    out.println"/**"
    out.println" *@description: ${entityName} Converter"
    out.println" *@author: JPA AUTO"
    def date = new Date()
    out.println" *@date: ${date}"
    out.println" */"
    out.println "@Mapper"
    out.println "public interface ${entityName}Convert {"
    out.println ""
    out.println "\t${entityName}Convert INSTANCE = Mappers.getMapper(${entityName}Convert.class);"
    out.println ""
    out.println "\t/**\n" +
                "\t * convert to vo\n" +
                "\t * @param entity\n" +
                "\t * @return vo\n" +
                "\t */"
    out.println "\t${entityName}VO toVO(${entityName} entity);"
    out.println ""
    out.println "\t/**\n" +
                "\t * convert to entity\n" +
                "\t * @param dto\n" +
                "\t * @return entity \n" +
                "\t */"
    out.println "\t${entityName} toEntity(${entityName}DTO dto);"
    out.println ""
    out.println "}"
}

// 生成文件夹
def mkdirs(dirs) {
    dirs.forEach {
        def f = new File(it)
        if (!f.exists()) {
            f.mkdirs()
        }
    }
}

// 生成文件头注释
def autoComments(out) {
    out.println"/**"
    out.println" *@description: TODO"
    out.println" *@author: JPA AUTO"
    def date = new Date()
    out.println" *@date: ${date}"
    out.println" */"
}

// 生成方法注释
def autoMethodComments(out,str, params) {
    out.println "\t/**"
    out.println "\t * ${str}"
    out.println "\t * @param ${params}"
    out.println "\t */"
}

// 生成方法注释
def autoMethodCommentsWithReturn(out,str,params) {
    out.println "\t/**"
    out.println "\t * ${str}"
    out.println "\t * @param ${params}"
    out.println "\t * @return"
    out.println "\t */"
}

// 获取表注释
def getTableComment(table) {
//  String a = "testi"
    String tc = table.getComment();
    if (tc != null) {
        tc = tc[0..-2];
//    table.getComment().replace("表","@")
    }

}

// 字符串首字母小写
def convertCamelCase(str) {
    str.substring(0,1).toLowerCase() + str.substring(1)
}

def clacBasePackage(dir) {
    dir.toString()
            .replaceAll("^.+\\\\src\\\\main\\\\java\\\\", "")
            .replaceAll("\\\\", ".")
}


def isBaseEntityProperty(property) {
    baseEntityProperties.find { it == property } != null
}

// 转换类型
def calcFields(table) {
    DasUtil.getColumns(table).reduce([]) { fields, col ->

        def spec = Case.LOWER.apply(col.getDataType().getSpecification())
        def typeStr = typeMapping.find { p, t -> p.matcher(spec).find() }.value
        fields += [[
                           name     : javaName(col.getName(), false),
                           colum    : col.getName(),
                           type     : typeStr,
                           dataType : col.getDataType().toString().replaceAll(/\(.*\)/, "").toLowerCase(),
                           len      : col.getDataType().toString().replaceAll(/[^\d]/, ""),
                           default  : col.getDefault(),
                           comment  : col.getComment(),
                           isNotNull: col.isNotNull(),
                           position : col.getPosition(),
                           getText  : col.getText()
//                           getDefault            : col.getDefault(),
//                           getParent             : col.getParent(),
//                           getTable              : col.getTable(),
//                           getDataType           : col.getDataType(),
//                           isNotNull             : col.isNotNull(),
//                           getWeight             : col.getWeight(),
//                           getDocumentation      : col.getDocumentation(),
//                           getTableName          : col.getTableName(),
//                           getName               : col.getName(),
//                           getLanguage           : col.getLanguage(),
//                           getTypeName           : col.getTypeName(),
//                           isDirectory           : col.isDirectory(),
//                           isValid               : col.isValid(),
//                           getComment            : col.getComment(),
//                           getText               : col.getText(),
//                           getDeclaration        : col.getDeclaration(),
//                           getPosition           : col.getPosition(),
//                           canNavigate           : col.canNavigate(),
//                           isWritable            : col.isWritable(),
//                           getIcon               : col.getIcon(),
//                           getManager            : col.getManager(),
//                           getDelegate           : col.getDelegate(),
//                           getChildren           : col.getChildren(),
//                           getKind               : col.getKind(),
//                           isCaseSensitive       : col.isCaseSensitive(),
//                           getProject            : col.getProject(),
//                           getDataSource         : col.getDataSource(),
//                           getVirtualFile        : col.getVirtualFile(),
//                           getMetaData           : col.getMetaData(),
//                           canNavigateToSource   : col.canNavigateToSource(),
//                           getDisplayOrder       : col.getDisplayOrder(),
//                           getDasParent          : col.getDasParent(),
//                           getLocationString     : col.getLocationString(),
//                           getDependences        : col.getDependences(),
//                           getBaseIcon           : col.getBaseIcon(),
//                           getNode               : col.getNode(),
//                           getTextLength         : col.getTextLength(),
//                           getFirstChild         : col.getFirstChild(),
//                           getLastChild          : col.getLastChild(),
//                           getNextSibling        : col.getNextSibling(),
//                           getTextOffset         : col.getTextOffset(),
//                           getPrevSibling        : col.getPrevSibling(),
//                           getPresentation       : col.getPresentation(),
//                           isPhysical            : col.isPhysical(),
//                           getTextRange          : col.getTextRange(),
//                           getPresentableText    : col.getPresentableText(),
//                           textToCharArray       : col.textToCharArray(),
//                           getStartOffsetInParent: col.getStartOffsetInParent(),
//                           getContext            : col.getContext(),
//                           getUseScope           : col.getUseScope(),
//                           getResolveScope       : col.getResolveScope(),
//                           getReferences         : col.getReferences(),
//                           getReference          : col.getReference(),
//                           getContainingFile     : col.getContainingFile(),
//                           getOriginalElement    : col.getOriginalElement(),
//                           getNavigationElement  : col.getNavigationElement(),
//                           getUserDataString     : col.getUserDataString(),
//                           isUserDataEmpty       : col.isUserDataEmpty(),
//                           getDbParent           : col.getDbParent(),
                   ]]

    }
}

def javaName(str, capitalize) {
    def s = str.split(/(?<=[^\p{IsLetter}])/).collect { Case.LOWER.apply(it).capitalize() }
            .join("").replaceAll(/[^\p{javaJavaIdentifierPart}]/, "_").replaceAll(/_/, "")
    capitalize || s.length() == 1 ? s : Case.LOWER.apply(s[0]) + s[1..-1]
}